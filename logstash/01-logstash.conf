input {
  beats {
    port => 5044
  }
}

filter {

  if [log_type] == "ssh_failed_logins" and "Failed password" in [message] {
    grok {
      match => {
        "message" => "Failed password for (invalid user )?%{USERNAME:ssh_user} from %{IP:src_ip} port %{NUMBER:src_port} %{WORD:protocol}"
      }
    }

    if [journald] and [journald][custom] and [journald][custom][syslog_timestamp] {
      date {
        match => ["[journald][custom][syslog_timestamp]", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
        target => "@timestamp"
      }
    }

    mutate {
      add_tag => [ "ssh_failed_login" ]
      remove_field => ["log_type"]
    }

    aggregate {
      task_id => "%{src_ip}"
      code => "
        map['failures'] ||= 0;
        map['failures'] += 1;
        event.set('fail_count', map['failures']);
        event.set('alert', 'Brute force detected!');
      "
      push_map_as_event_on_timeout => true
      timeout => 20
    }
  }

  else if [log_type] == "web_logs" {
    grok {
      match => {
        "message" => '%{IPORHOST:client_ip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes}'
      }
    }

    mutate {
      remove_tag => ["_grokparsefailure", "beats_input_codec_plain_applied"]
    }

    # Add timestamp field for web logs
    if ![timestamp] {
      date {
        match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
        target => "@timestamp"
      }
    }

    # Detect SQLi (regex match)
    if [request] =~ /(?i)(%27.*or.*%27\d+%27%3D%27\d+|%27%20or%20%271%27%3D%271|%27%20or%201%3D1|union.*select|select.*from|insert.*into|update.*set|delete.*from|drop%20table)/ {
      mutate {
        add_tag => ["sqli_attempt"]
      }
    }

    # Detect XSS
    if [request] =~ /(?i)(<script>|javascript:|onload=|onerror=|onmouseover=|alert\(|document\.cookie|eval\(|fromCharCode)/ {
      mutate {
        add_tag => ["xss_attempt"]
      }
    }

    # Tag as web attack if any detected
    if "sqli_attempt" in [tags] or "xss_attempt" in [tags] {
      mutate {
        add_field => {
          "alert" => "Web attack detected"
          "attack_type" => "%{tags}"
        }
      }
    }
  }
}

output {

  ### SSH Alerts
  if "Brute force detected!" in [alert] {
    file {
      path => "/tmp/security_alerts.txt"
      codec => line {
        format => "ðŸš¨ SSH ALERT: %{fail_count} failed logins from %{src_ip} at %{+YYYY-MM-dd HH:mm:ss} ðŸš¨"
      }
    }
  }

  ### Web Attack Alerts
  if "Web attack detected" in [alert] {
    file {
      path => "/tmp/security_alerts.txt"
      codec => line {
        format => "ðŸš¨ WEB ALERT: %{attack_type} from %{client_ip} at %{+YYYY-MM-dd HH:mm:ss} - %{request} ðŸš¨"
      }
    }
  }

  ### Elasticsearch Indexing
  if [log_type] == "ssh_failed_logins" {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "ssh-failed-logins-%{+YYYY.MM.dd}"
    }
  }

  if [log_type] == "web_logs" {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "web-logs-%{+YYYY.MM.dd}"
    }
  }

  stdout { codec => rubydebug }
}
